【1】system V IPC
 共享内存
     为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其映射到自己的私有地址空间（虚拟地址空间上）
	 
	 进程就可以直接读写这一内存区而不需要进行数据的拷贝，从而大大提高的效率。

	 由于多个进程共享一段内存，因此也需要依靠某种同步机制
	 

 函数原型：int shmget(key_t key, size_t size, int shmflg);
 功能：创建或打开共享内存区域
 参数：key    ftok的返回值
       size   创建的共享区域的大小
	   shmflg  标志位    IPC_CRERAT|IPC_EXCL|0664  创建并打开共享内存区域
	                     0664     打开共享内存区域
 返回值：成功  共享内存标识符
         失败  -1
		 
		 
 函数原型：void *shmat(int shmid, const void *shmaddr, int shmflg);
 功能：将共享内存区域映射到进程的虚拟地址空间上
 参数：shmid  shmget的返回值
       shmaddr  NULL  映射到一块合适的虚拟地址空间上
	   shmflg  0
 返回值：成功   映射后，虚拟地址
         失败   -1
		 
 函数原型：int shmdt(const void *shmaddr);
 功能：断开映射
 参数：shmaddr   映射后，虚拟地址
 返回值：成功   0
         失败   -1
		 
		 
 函数原型：int shmctl(int shmid, int cmd, struct shmid_ds *buf);
 功能：共享内存的控制函数
 参数：shmid  共享内存标识符
       cmd    IPC_STAT  获取共享内存的属性
	          IPC_SET   设置共享内存的属性
			  IPC_RMID  删除共享区域
	   buf    描述共享内存区域的属性的结构体指针
	   
 返回值：成功   0
         失败   -1
		 
【2】信号灯
 信号灯(semaphore)，也叫信号量集。它是不同进程间或一个给定进程内部不同线程间同步的机制
 
 System V的信号灯是一个或者多个信号灯的一个集合
 
 函数原型： int semget(key_t key, int nsems, int semflg);
 功能：创建或打开一个信号灯
 参数：key  ftok的返回值
       nsems   创建信号量的个数
	   semflg   IPC_CREAT|IPC_EXCL|0664  创建或打开信号灯
	            0664  打开信号灯
 返回值：成功  信号灯标识符
         失败  -1
		 
 函数原型：int semop(int semid, struct sembuf *sops, unsigned nsops);
 功能：操作信号灯中的某一个信号量
 参数：semid   信号灯标识符
       sops     struct sembuf{
	               unsigned short sem_num;  /* semaphore number */   信号量的编号
                   short          sem_op;   /* semaphore operation */  
				                            1  释放资源  V操作
											-1 申请资源  P操作
											0   等待信号量的值变成 0
                   short          sem_flg;  /* operation flags */  0
				}
	   nsops  操作的信号量的个数
 返回值：成功   0
         失败   -1


 函数原型：int semctl(int semid, int semnum, int cmd, ...);	
 功能： 操作信号量集合中的某一个信号量
 参数：semid  信号灯标识符
       semnum  操作的信号量的编号
	   cmd     IPC_STAT  获取信号量的属性
	           IPC_SET   设置信号量的属性
			   IPC_RMID  删除一个信号量
			   SETVAL    设置信号量的初始值
			   
			             union semun {
                            int  val;    /* Value for SETVAL */
			   GETVAL    获取当前信号量的值

 返回值：成功	 GETVAL  返回信号量的值
                         0
         失败    -1 
 
		 
		 
		 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 