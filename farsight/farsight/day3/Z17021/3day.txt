【1】编译
	gcc  1.c   -->  a.out
	./a.out

【2】数组
	1、元素类型相同
	2、存储空间连续
	3、数组名：首地址


【3】冒泡排序

	 N  =  5

i=0	a[0]  a[1]  a[2]  a[3]  a[4]		int i=0; i<N-1
				最大值
i=1	a[0]  a[1]  a[2]  a[3]			int j(前下标)=0； j <N-i-1;  
			  次大值			    j+1(后下标)
i=2	a[0]  a[1]  a[2]
		   中间值
i=3	a[0]  a[1]
	     次小值


【4】二维数组
	int a[3][4]；

	a
	a[0]、a[1]、a[2]

【5】指针
	指针变量，地址常量

【6】运算

	1--- *
		1、数据类型的一部分
		2、指针解引用：根据地址获取地址里的内容
		3、指针的降级：行指针---》列指针

	2--- + -
		指针的加减：加减的是单位长度
		单位长度：指针所指向的数据所占的字节数

	3--- [ ]
		a[i]<==> *(a+i)
		指针加单位长度后，取内容运算  
	
	4--- &


【7】指针占4字节，跟类型没有关系（32位系统）
【8】* 与 &互为逆运算



【9】指针数组
	int *p[3];
	
	本质：指针
	元素：int *型
	[3] ：元素个数

【10】数组指针
	int a[3][2];
	int （*p）[2];

	本质：指针，专用于指向数组的指针(多数用于指向二维数组)
	int ：所指向数组元素的类型      
	[2] ：必须指向列数为2的数组
	（*）：区别于指针数组


【11】
	main
	库函数
	系统调用
	自定函数

【12】传参
	1--- 复制传递方式
	2--- 地址传递方式
	
	向一个函数传递一个地址量时，定义指针的形式去承接实参


【13】
	char *strcpy（char *a， char *b）;
	int atoi(char *);

	
【14】指针函数

	<数据类型> * <函数名称>(<参数说明>)
	{
	      语句序列；
	}

	1--- 本质是函数
	2--- 返回值是一个地址量的函数


【15】函数指针

	<数据类型> （*<函数指针名称>)（<参数说明列表>)；

	1--- 本质：指针
	2--- 指向一个函数入口地址的指针
	3--- 函数名是函数的入口地址


【16】函数指针数组

	<数据类型>    ( * <函数指针数组名称> [<大小>] ) ( <参数说明列表> )；

	1--- 本质：数组；
	2--- 元素：函数指针类型；
	3--- 由多个 可以指向函数入口地址的指针 组成的数组。



【17】回调函数

int *a(   char *(*b)(int c,int d),     float *e,     char f);

	a：函数
	b：函数指针
	a( fun  ,float *, char)



【18】递归函数
	自己调用自己本身；


 int fun(int 2)                                     
   {
       if(2 > 0)
       {
           printf("***********\n");
           a--;
           fun(a);                =====>     int fun(int 1)                      
       }                                        {
      printf("------------\n");                     if(1 > 0)
      return 0;                                     {
  }                                                     printf("***********\n");
                                                        a--;
***********                                             fun(a);                     =====>    int fun(int 0)                    
***********                                                  }                                  {
------------                                        printf("------------\n");                        if(0 > 0)
------------                                      return 0;                                        {
------------                                 }                                                        printf("***********\n");
                                                                                                        a--;
                                                                                                        fun(a);                 
                                                                                                    }
                                                                                                   printf("------------\n");
                                                                                                   return 0;
                                                                                               }




【19】const

【20】void





	